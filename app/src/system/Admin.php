<?php

/**
 * Created by PhpStorm.
 * User: Chris
 * Date: 9/25/2019
 * Time: 2:27 PM
 */
include_once dirname(__FILE__) . '/vendor/autoload.php';
use \PHPMailer\PHPMailer\PHPMailer;
use Firebase\JWT\JWT;
class Admin extends System
{
    public function __construct()
    {
        return parent::__construct();
    }

    public function validateParameter($fieldName, $value, $dataType, $required = true)
    {
        return parent::validateParameter($fieldName, $value, $dataType, $required); // TODO: Change the autogenerated stub
    }

    public function escape_data($data)
    {
        return parent::escape_data($data); // TODO: Change the autogenerated stub
    }

    public function login()
    {
        try{
            $email = $this->getEmail();
            $sql = "SELECT `id`,`password` FROM `admin` WHERE `email`='$email'";
            $qry = mysqli_query($this->con, $sql);
            if (mysqli_num_rows($qry) == 1){
                $row = mysqli_fetch_assoc($qry);
                $hash = $row['password'];
                if(password_verify($this->getPassword(), $hash)){
                    $paylod = [
                        'iat' => time(),
                        'iss' => 'localhost',
                        'exp' => time() + (60*60*8),
                        'userId' => $row['id']
                    ];

                    $token = JWT::encode($paylod, SECRETE_KEY);
                    $data = array('success' => true, 'statusCode' => SUCCESS_RESPONSE, 'message'=> 'Login successful','token'=>$token);
                    return $data;

                }else{
                    $data = array('success' => false, 'statusCode' => UNAUTHORISED, 'error'=> array('type' => "LOGIN_ERROR", 'message' => 'Invalid Login Credentials'));
                    return $data;
                }
            }else{
                $data = array('success' => false, 'statusCode' => NOT_FOUND, 'error'=> array('type' => "LOGIN_ERROR", 'message' => 'Account not found'));
                return $data;
            }
        }catch (\Exception $e){
            $data = array('success' => false, 'statusCode' => INTERNAL_SERVER_ERROR, 'error'=> array('type' => "SERVER_ERROR", 'message' => $e->getMessage()));
            return $data;
        }

    }

    public function create(){

        $cat = $this->getCategory();
        $email = $this->getEmail();
        $pwd = password_hash($this->getPassword(), PASSWORD_BCRYPT, array("cost" => 10));
        $permissions = $this->getPermission();
        $sql = "INSERT INTO `admin`(`id`, `email`, `password`, `permisions`, `name`, `surname`, `profile`, `category`) VALUES ('','$email','$pwd','$permissions','','','','$cat')";
        $qry = mysqli_query($this->con, $sql);

        if ($qry){
            //send email about creation to $email
            $data = array('success' => true, 'statusCode' => CREATED, 'message'=> 'Account created successfully');
            return $data;
        }else{
            $data = array(
                'success' => false,
                'statusCode' => INTERNAL_SERVER_ERROR,
                'error' => array(
                    'type' => "SERVER_ERROR",
                    'message' => 'Account creation not complete. Error: '. mysqli_error($this->con))
            );

            return $data;
        }

    }

    public function edit(){

    }

    public function updatePassword(){

    }

    public function adminAll(){
        try{
            $sql = "SELECT * FROM `admin`";
            $qry = mysqli_query($this->con, $sql);
            if (mysqli_num_rows($qry) > 0){
                $row = mysqli_fetch_assoc($qry);
                $users = json_encode($row);
                $data = array('success' => true, 'statusCode' => SUCCESS_RESPONSE, 'message'=> 'Fetched Users','users'=>$users);
                return $data;
            }else{
                $data = array('success' => false, 'statusCode' => NOT_FOUND, 'error'=> array('type' => "FETCH_DATA_ERROR", 'message' => 'Users not found'));
                return $data;
            }
        }catch (\Exception $e){
            $data = array('success' => false, 'statusCode' => INTERNAL_SERVER_ERROR, 'error'=> array('type' => "SERVER_ERROR", 'message' => $e->getMessage()));
            return $data;
        }
    }
}